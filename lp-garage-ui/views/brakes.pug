extends layout

block content 
  -var vehicleData 
  -var partName 
  -var subpartName = subpartName||""
  div(id="wrapper").d-flex
    div(id="page-content-wrapper")
        -var page="Brakes"
        include navbar.pug 
        .container-fluid
            .row.flex-nowrap
                include vehicleNav
                .col.py-3
                    h1 Frenos
                    .col-lg-5
                      form#form-brakes.needs-validation(novalidate action="#" method="post")
                        h3 Altura del Centro de Gravedad
                        label.form-label(for="brakes_wheelbase") Distancia entre ejes 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.wheelbase")
                          if fieldValue
                            -var wheelbase = unitRE.exec(fieldValue)[1] || fieldValue
                            -var wheelbase_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var wheelbase = ""
                            -var wheelbase_units="cm"
                          input.form-control.align-right(
                            id="brakes_wheelbase"
                            type="number"
                            step="any"
                            value= wheelbase 
                            data-bound="Brakes.wheelbase"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_wheelbase_units"
                            aria-label="Unidades Distancia entre ejes"
                            data-from="brakes_wheelbase"
                          )
                            +unitOption("cm", "cm", wheelbase_units)
                            +unitOption("m", "m", wheelbase_untis)
                            +unitOption("in", "pulg", wheelbase_units)
                        label.form-label(for="brakes_frontAxleWeightLeveled") Peso eje delantero con vehículo nivelado 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.frontAxleWeightLeveled")
                          if fieldValue
                            -var frontAxleWeightLeveled = unitRE.exec(fieldValue)[1] || fieldValue
                            -var frontAxleWeightLeveled_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var frontAxleWeightLeveled = ""
                            -var frontAxleWeightLeveled_units="kg"
                          input.form-control.align-right(
                            id="brakes_frontAxleWeightLeveled"
                            type="number"
                            step="any"
                            value= frontAxleWeightLeveled 
                            data-bound="Brakes.frontAxleWeightLeveled"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_frontAxleWeightLeveled_units"
                            aria-label="Unidades Peso eje delantero con vehículo nivelado"
                            data-from="brakes_frontAxleWeightLeveled"
                          )
                            +unitOption("kg", "Kg", frontAxleWeightLeveled_units)
                            +unitOption("lb", "lb", frontAxleWeightLeveled_untis)
                        label.form-label(for="brakes_frontAxleWeightWithRearAxleElevated") Peso eje delantero con eje trasero elevado 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.frontAxleWeightWithRearAxleElevated")
                          if fieldValue
                            -var frontAxleWeightWithRearAxleElevated = unitRE.exec(fieldValue)[1] || fieldValue
                            -var frontAxleWeightWithRearAxleElevated_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var frontAxleWeightWithRearAxleElevated = ""
                            -var frontAxleWeightWithRearAxleElevated_units="kg"
                          input.form-control.align-right(
                            id="brakes_frontAxleWeightWithRearAxleElevated"
                            type="number"
                            step="any"
                            value= frontAxleWeightWithRearAxleElevated 
                            data-bound="Brakes.frontAxleWeightWithRearAxleElevated"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_frontAxleWeightWithRearAxleElevated_units"
                            aria-label="Unidades Peso eje delantero con eje trasero elevado"
                            data-from="brakes_frontAxleWeightWithRearAxleElevated"
                          )
                            +unitOption("kg", "Kg", frontAxleWeightWithRearAxleElevated_units)
                            +unitOption("lb", "lb", frontAxleWeightWithRearAxleElevated_untis)
                        label.form-label(for="brakes_rearAxleElevationHeight") Altura elevada del eje trasero 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.rearAxleElevationHeight")
                          if fieldValue
                            -var rearAxleElevationHeight = unitRE.exec(fieldValue)[1] || fieldValue
                            -var rearAxleElevationHeight_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var rearAxleElevationHeight = ""
                            -var rearAxleElevationHeight_units="cm"
                          input.form-control.align-right(
                            id="brakes_rearAxleElevationHeight"
                            type="number"
                            step="any"
                            value= rearAxleElevationHeight 
                            data-bound="Brakes.rearAxleElevationHeight"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_rearAxleElevationHeight_units"
                            aria-label="Unidades Altura elevada del eje trasero"
                            data-from="brakes_rearAxleElevationHeight"
                          )
                            +unitOption("cm", "cm", rearAxleElevationHeight_units)
                            +unitOption("in", "pulg", rearAxleElevationHeight_untis)
                            +unitOption("m", "m", rearAxleElevationHeight_units)
                        label.form-label(for="brakes_rearAxleWeight") Peso del eje trasero 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.rearAxleWeight")
                          if fieldValue
                            -var rearAxleWeight = unitRE.exec(fieldValue)[1] || fieldValue
                            -var rearAxleWeight_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var rearAxleWeight = ""
                            -var rearAxleWeight_units="kg"
                          input.form-control.align-right(
                            id="brakes_rearAxleWeight"
                            type="number"
                            step="any"
                            value= rearAxleWeight 
                            data-bound="Brakes.rearAxleWeight"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_rearAxleWeight_units"
                            aria-label="Unidades Peso del eje trasero"
                            data-from="brakes_rearAxleWeight"
                          )
                            +unitOption("kg", "Kg", rearAxleWeight_units)
                            +unitOption("lb", "lb", rearAxleWeight_untis)
                        h3 Transferencia de Pesos
                        label.form-label(for="brakes_trackWidth") Distancia de vía o trocha 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.trackWidth")
                          if fieldValue
                            -var trackWidth = unitRE.exec(fieldValue)[1] || fieldValue
                            -var trackWidth_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var trackWidth = ""
                            -var trackWidth_units="cm"
                          input.form-control.align-right(
                            id="brakes_trackWidth"
                            type="number"
                            step="any"
                            value= trackWidth 
                            data-bound="Brakes.trackWidth"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_trackWidth_units"
                            aria-label="Unidades Distancia de vía o trocha"
                            data-from="brakes_trackWidth"
                          )
                            +unitOption("cm", "cm", trackWidth_units)
                            +unitOption("m", "m", trackWidth_untis)
                            +unitOption("in", "pulg", trackWidth_units)
                        h3 Características Freno 
                        label.form-label(for="brakes_brakePumpPistonDiameter") Diámetro del pistón de la bomba 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.brakePumpPistonDiameter")
                          if fieldValue
                            -var brakePumpPistonDiameter = unitRE.exec(fieldValue)[1] || fieldValue
                            -var brakePumpPistonDiameter_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var brakePumpPistonDiameter = ""
                            -var brakePumpPistonDiameter_units="m"
                          input.form-control.align-right(
                            id="brakes_brakePumpPistonDiameter"
                            type="number"
                            step="any"
                            value= brakePumpPistonDiameter 
                            data-bound="Brakes.brakePumpPistonDiameter"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_brakePumpPistonDiameter_units"
                            aria-label="Unidades Diámetro del pistón de la bomba"
                            data-from="brakes_brakePumpPistonDiameter"
                          )
                            +unitOption("m", "m", brakePumpPistonDiameter_units)
                            +unitOption("in", "pulg", brakePumpPistonDiameter_untis)
                            +unitOption("cm", "cm", brakePumpPistonDiameter_untis)
                        label.form-label(for="brakes_numberOfCaliperPiston") Número de pistonoes de la mordaza 
                        -var numberOfCaliperPiston = getProperty(vehicleData, "Brakes.numberOfCaliperPiston")||""
                        input.form-control.align-right(
                          id="brakes_numberOfCaliperPiston"
                          type="number"
                          step=1
                          value= numberOfCaliperPiston 
                          data-bound="Brakes.numberOfCaliperPiston"
                          data-from="brakes_numberOfCaliperPiston"
                        )
                        label.form-label(for="brakes_caliperPistonDiameter") Diámetro del pistón de la mordaza 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.caliperPistonDiameter")
                          if fieldValue
                            -var caliperPistonDiameter = unitRE.exec(fieldValue)[1] || fieldValue
                            -var caliperPistonDiameter_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var caliperPistonDiameter = ""
                            -var caliperPistonDiameter_units="m"
                          input.form-control.align-right(
                            id="brakes_caliperPistonDiameter"
                            type="number"
                            step="any"
                            value= caliperPistonDiameter 
                            data-bound="Brakes.caliperPistonDiameter"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_caliperPistonDiameter_units"
                            aria-label="Unidades Diámetro del pistón de la mordaza"
                            data-from="brakes_caliperPistonDiameter"
                          )
                            +unitOption("m", "m", caliperPistonDiameter_units)
                            +unitOption("in", "pulg", caliperPistonDiameter_untis)
                            +unitOption("cm", "cm", caliperPistonDiameter_units)
                        h3 Fuerzas de Frenado 
                        label.form-label(for="brakes_tireFrictionCoefficient") Coeficiente de fricción del neumático 
                        -var tireFrictionCoefficient = getProperty(vehicleData, "Brakes.tireFrictionCoefficient") || "0.8"
                        input.form-control.align-right(
                          id="brakes_tireFrictionCoefficient"
                          type="number"
                          step="any"
                          value= tireFrictionCoefficient 
                          data-bound="Brakes.tireFrictionCoefficient"
                          required
                        )
                        label.form-label(for="brakes_appliedForceInBrakePedal") Fuerza aplicada al pedal del freno 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.appliedForceInBrakePedal")
                          if fieldValue
                            -var appliedForceInBrakePedal = unitRE.exec(fieldValue)[1] || fieldValue
                            -var appliedForceInBrakePedal_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var appliedForceInBrakePedal = ""
                            -var appliedForceInBrakePedal_units="kgf"
                          input.form-control.align-right(
                            id="brakes_appliedForceInBrakePedal"
                            type="number"
                            step="any"
                            value= appliedForceInBrakePedal 
                            data-bound="Brakes.appliedForceInBrakePedal"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_appliedForceInBrakePedal_units"
                            aria-label="Unidades Fuerza aplicada al pedal del freno"
                            data-from="brakes_appliedForceInBrakePedal"
                          )
                            +unitOption("kgf", "kgf", appliedForceInBrakePedal_units)
                            +unitOption("lbf", "lbf", appliedForceInBrakePedal_untis)
                            +unitOption("N", "N", appliedForceInBrakePedal_units)
                        label.form-label(for="brakes_padFrictionCoefficient") Coeficiente de fricción de la pastilla 
                        -var padFrictionCoefficient = getProperty(vehicleData, "Brakes.padFrictionCoefficient")
                        input.form-control.align-right(
                          id="brakes_padFrictionCoefficient"
                          type="number"
                          step="any"
                          value= padFrictionCoefficient 
                          data-bound="Brakes.padFrictionCoefficient"
                          required
                        )
                        label.form-label(for="brakes_padWidth") Ancho de pastilla 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.padWidth")
                          if fieldValue
                            -var padWidth = unitRE.exec(fieldValue)[1] || fieldValue
                            -var padWidth_units = unitRE.exec(fieldValue)[2] || ""
                          else 
                            -var padWidth = ""
                            -var padWidth_units="m"
                          input.form-control.align-right(
                            id="brakes_padWidth"
                            type="number"
                            step="any"
                            value= padWidth 
                            data-bound="Brakes.padWidth"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_padWidth_units"
                            aria-label="Unidades Ancho de pastilla"
                            data-from="brakes_padWidth"
                          )
                            +unitOption("m", "m", padWidth_units)
                            +unitOption("in", "pulg", padWidth_untis)
                            +unitOption("cm", "cm", padWidth_units)
                        h3 Distancia de Frenado
                        label.form-label(for="brakes_speedBeforeBraking") Velocidad antes de frenado 
                        .input-group.mb-3 
                          -var fieldValue = getProperty(vehicleData, "Brakes.speedBeforeBraking")
                          if fieldValue
                            -var speedBeforeBraking = unitRE.exec(fieldValue)[1] || fieldValue
                            -var speedBeforeBraking_units = unitRE.exec(fieldValue)[2] || "km / h"
                          else 
                            -var speedBeforeBraking = ""
                            -var speedBeforeBraking_units="km / h"
                          input.form-control.align-right(
                            id="brakes_speedBeforeBraking"
                            type="number"
                            step="any"
                            value= speedBeforeBraking 
                            data-bound="Brakes.speedBeforeBraking"
                            required
                          )
                          select.form-select.input-group-text.unit(
                            id="brakes_speedBeforeBraking_units"
                            aria-label="Unidades Ancho de pastilla"
                            data-from="brakes_speedBeforeBraking"
                          )
                            +unitOption("km / h", "Km/h", speedBeforeBraking_units)
                            +unitOption("mi / h", "MPH", speedBeforeBraking_untis)
                        if !getProperty(vehicleData, "Brakes")
                          .d-grid
                            button.btn.btn-primary( 
                              type="submit"
                              id="btn-save"
                              value="submit"
                            ) Guardar
                .col-lg-6 
                  if getProperty(vehicleData, "Brakes")
                    h3 Cálculos de Freno
                    ul.list-group 


                if getProperty(vehicleData, "Brakes")
                  script(src="/javascripts/formControls.js")
                  script. 
                        var vehicleData= !{JSON.stringify(vehicleData)};
                        const partName="#{partName}";
                        const subpartName="#{subpartName}";        
                        document.addEventListener("DOMContentLoaded", ()=> {
                            setUnitSelectEventListener();
                            setInputEventListener();
                            setUnitButtonListener();
                        })
                else 
                    script.
                        // Scripts
                        var vehicleData= !{JSON.stringify(vehicleData)};
                        function savePart() {
                          let payload={};
                          dataBoundElements = [
                            {elName:"wheelbase", units:true}, 
                            {elName:"trackWidth", units:true},
                            {elName:"frontAxleWeightLeveled", units:true},
                            {elName:"rearAxleElevationHeight", units:true},
                            {elName:"frontAxleWeightWithRearAxleElevated", units:true},
                            {elName:"rearAxleWeight", units:true},
                            {elName:"brakePumpPistonDiameter", units:true},
                            {elName:"numberOfCaliperPiston", units:false},
                            {elName:"caliperPistonDiameter", units:true},
                            {elName:"padFrictionCoefficient", units:false},
                            {elName:"padWidth", units:true},
                            {elName:"speedBeforeBraking", units:true},
                            {elName:"appliedForceInBrakePedal", units:true},
                            {elName:"tireFrictionCoefficient", units:false}
                          ]
                          for( let i=0; i<dataBoundElements.length; i++) {
                            let dbe = dataBoundElements[i];
                            payload[dbe.elName] = document.querySelector(`#brakes_${dbe.elName}`).value +
                              (dbe.units ? " " + document.querySelector(`#brakes_${dbe.elName}_units`).value : "")
                          }
                            fetch(
                                `/vehicle/${vehicleData.id}/Brakes`,
                                {
                                    "method":"post",
                                    "body":JSON.stringify(payload),
                                    "headers":{
                                        "Content-Type":"application/json"
                                    }
                                }
                            )
                                .then(res=>res.json())
                                .then(jsonData => {
                                    if(!jsonData.Error) {
                                        window.location.reload()
                                    } else {
                                        showAlert("Error creando sección de frenos", "ERROR")
                                        console.error("Error creating Brakes", jsonData)
                                    }
                                })
                                .catch(e=>{
                                    console.error("Error creating brakes", e)
                                    showAlert("Error creando sección de frenos", "ERROR")
                                })
                        }
                        document.querySelector("#form-brakes").addEventListener(
                            "submit",
                            e => {
                                e.preventDefault();
                                e.stopPropagation();
                                let form=document.getElementById("form-brakes")
                                if (form.checkValidity()) {
                                    savePart();
                                } else {
                                    form.classList.add('was-validated');
                                }
                            }
                        )